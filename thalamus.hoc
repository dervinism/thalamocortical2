/*----------------------------------------------------------------------------

    FULL THALAMIC MODEL: Nucleus Reticularis Thalami (NRT) and a thalamic relay nucleus (TC)
	========================================================================================

    The basic thalamic model is a 2xTC & 2xNRT network. This is the minimal
    model required in order to simulate sleep spindles. The current
    (i.e., 2013) view is that sleep spindles are generated by the
    interaction of thalamic relay or thalamocortical (TC) cells and cells
    in the nucleus reticularis thalami (NRT). This view was assumed
    while constructing this model. The model implementation allows
    simulations to be run on a multi-core processor taking advantage of
    parallel processing.

    Written by Martynas Dervinis, Cardiff University, 2013.

----------------------------------------------------------------------------*/



objref tvec, idvec, cells, TCcells, NRTcells, TCgids, NRTgids, nil
objref ncTCAMPA, ncTCNMDA, juncTCTC, ncNRTGABAa, ncNRTGABAb, ncNRTNRT, gapList



// ------------------------------------------------------------------------
// Create models of single cells:
// ------------------------------------------------------------------------

tvec = new Vector()         // will be Vectors that record all spike times (tvec)
idvec = new Vector()        // and the corresponding id numbers of the cells that spiked (idvec)

if (modelType == 4) {
    ncells = 2                  // number of single type cells in the network
} else {
    ncells = 2
}
cells = new List()
TCcells = new List()
NRTcells = new List()
TCgids = new Vector(ncells)
NRTgids = new Vector(ncells)
if (modelType != 3) {
    ngids = 2*ncells
} else {
    ngids = ncells
}

proc createCells() {local i, gid  localobj cell, nc
    if (pProc) {
        for cellitr(&gid, pc) {
            pc.set_gid2node(gid, pc.id)
            if (modelType != 3 && gid < ncells) {
            	cell = new TCcell()
                TCcells.append(cell)
            } else {
                cell = new NRTcell()
                NRTcells.append(cell)
            }
            nc = cell.connect2target(nil, 0, 0)
            pc.cell(gid, nc)
            pc.spike_record(gid, tvec, idvec)
            cells.append(cell)
        }
    } else {
        for i = 0, ngids-1 {
            if (modelType != 3 && i < ncells) {
                cell = new TCcell()
                TCcells.append(cell)
            } else {
                cell = new NRTcell()
                NRTcells.append(cell)
            }
            nc = cell.connect2target(nil, 0, 0)
            nc.record(tvec, idvec)
            cells.append(cell)
        }
    }

    for i = 0, ncells-1 {
        if (modelType != 3) {
            TCgids.x[i] = i
            NRTgids.x[i] = ncells + i
        } else {
            NRTgids.x[i] = i
        }
    }
}

createCells()







// ------------------------------------------------------------------------
// Create the network:
// ------------------------------------------------------------------------

syns = 1                    // connect cells by synapses: 0 - no, 1 - yes.
gaps = 0                    // connect cells by electric gap junctions: 0 - no, 1 - yes.

if (modelType == 3) {
    // Create NRT-NRT GABA_A synapses and connect them to the source:
    if (syns) {
        fanoutNRTNRT = 2
        createSyns(NRTcells, NRTgids, 2, -70, pc)
        ncNRTNRT = connectSyns(NRTcells, NRTgids, NRTcells, NRTgids, fanoutNRTNRT, 0, 1.5, 1, 0, pc)
    }

    // Create gap junctions:
    if (gaps) {
        gapList = createGaps(1e9, NRTcells, pc)
    }

} else if (modelType == 4) {
    if (runMode != 2) {
        if (syns) {
            // Create TC-NRT AMPA synapses and connect them to the source:
            fanoutTCGLUT = 2
            createSyns(NRTcells, NRTgids, 0, 0, pc)
            ncTCAMPA = connectSyns(TCcells, TCgids, NRTcells, NRTgids, fanoutTCGLUT, 0, 1, 4, 1, pc)

            // Create TC-NRT NMDA synapses and connect them to the source:
            createSyns(NRTcells, NRTgids, 1, 0, pc)
            ncTCNMDA = connectSyns(TCcells, TCgids, NRTcells, NRTgids, fanoutTCGLUT, 1, 1, 4, 1, pc)

            // Create NRT-TC GABA_A synapses and connect them to the source:
            fanoutNRTGABA = 2
            createSyns(TCcells, TCgids, 2, -80, pc)
            ncNRTGABAa = connectSyns(NRTcells, NRTgids, TCcells, TCgids, fanoutNRTGABA, 0, 2.5, 5, 1, pc)

            // Create NRT-TC GABA_B synapses and connect them to the source:
            createSyns(TCcells, TCgids, 3, -90, pc)
            ncNRTGABAb = connectSyns(NRTcells, NRTgids, TCcells, TCgids, fanoutNRTGABA, 1, 2.5, 5, 1, pc)
            
            // Create NRT-NRT GABA_A synapses and connect them to the source:
            fanoutNRTNRT = 2
            createSyns(NRTcells, NRTgids, 2, -70, pc)
            ncNRTNRT = connectSyns(NRTcells, NRTgids, NRTcells, NRTgids, fanoutNRTNRT, 2, 1, 0.5, 0, pc)
        }

        // Create gap junctions:
        if (gaps) {
            gapList = createGaps(1e9, NRTcells, pc)
        }
    } else {
        if (syns) {
            fanoutTCGLUT = 2
            createSyns(NRTcells, NRTgids, 0, 0, pc)
            //ncTCAMPA = connectSyns(TCcells, TCgids, NRTcells, NRTgids, fanoutTCGLUT, 0, 1, 1, 1, pc)

            createSyns(NRTcells, NRTgids, 1, 0, pc)
            //ncTCNMDA = connectSyns(TCcells, TCgids, NRTcells, NRTgids, fanoutTCGLUT, 1, 1, 1, 1, pc)

            fanoutNRTGABA = 2
            createSyns(TCcells, TCgids, 2, -80, pc)
            //ncNRTGABAa = connectSyns(NRTcells, NRTgids, TCcells, TCgids, fanoutNRTGABA, 0, 2.5, 1, 1, pc)

            createSyns(TCcells, TCgids, 3, -90, pc)
            ncNRTGABAb = connectSyns(NRTcells, NRTgids, TCcells, TCgids, fanoutNRTGABA, 1, 2.5, 1, 1, pc)
        }
    }
} else if (modelType == 5) {
    if (syns) {
        // Create TC-NRT AMPA synapses and connect them to the source:
        fanoutTCGLUT = 5
        createSyns(NRTcells, NRTgids, 0, 0, pc)
        ncTCAMPA = connectSyns(TCcells, TCgids, NRTcells, NRTgids, fanoutTCGLUT, 0, 1, 4, 1, pc)

        // Create TC-NRT NMDA synapses and connect them to the source:
        createSyns(NRTcells, NRTgids, 1, 0, pc)
        ncTCNMDA = connectSyns(TCcells, TCgids, NRTcells, NRTgids, fanoutTCGLUT, 1, 1, 4, 1, pc)

        // Create NRT-TC GABA_A synapses and connect them to the source:
        fanoutNRTGABA = 3
        createSyns(TCcells, TCgids, 2, -85, pc)
        ncNRTGABAa = connectSyns(NRTcells, NRTgids, TCcells, TCgids, fanoutNRTGABA, 0, 2.5, 5, 1, pc)

        // Create NRT-TC GABA_B synapses and connect them to the source:
        createSyns(TCcells, TCgids, 3, -95, pc)
        ncNRTGABAb = connectSyns(NRTcells, NRTgids, TCcells, TCgids, fanoutNRTGABA, 1, 2.5, 5, 1, pc)
            
        // Create NRT-NRT GABA_A synapses and connect them to the source:
        fanoutNRTNRT = 3
        createSyns(NRTcells, NRTgids, 2, -70, pc)
        ncNRTNRT = connectSyns(NRTcells, NRTgids, NRTcells, NRTgids, fanoutNRTNRT, 2, 1, 0.5, 0, pc)
	}

    // Create gap junctions:
    if (gaps) {
    	gapList = createGaps(1e9, NRTcells, pc)
	}
}



if (pProc) {
    pc.setup_transfer()
}
